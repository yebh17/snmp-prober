#!/usr/bin/python
from easysnmp import Session,exceptions
from time import time,sleep
import sys

def main(argv):
    if len(argv) == 4:
        sys_var = argv[0].split(':')
        if len(sys_var) == 3:
            agent_ip = sys_var[0]
            port= int(sys_var[1])
            community = sys_var[2]
            sample_freq = float(argv[1])
            samples = int(argv[2])
            oid = ['1.3.6.1.2.1.1.3.0'] 
            oid +=  argv[3:]
            snmp_prober(agent_ip,port,community,sample_freq,samples,oid)
        else:
            print("Invalid System details <Agent_Ip:Port:Community>",len(sys_var))
            sys.exit()
    else:
        print("Invalid Input Format",len(argv))
        sys.exit()
    

def snmp_prober(agent_ip,port,community,sample_freq,samples,oid):
    interval = 1.0/sample_freq
    previous = []
    current = []
    temp = 0
    timeout = 0
    reboots = 0
    session = Session(hostname=agent_ip,remote_port=port,community=community,version=2)
    previous_time = 0
    rates = []
    while(temp<samples):
        request_time = time()
        try:
            current = session.get(oid)
            # print("<<<<<current",current)

        except exceptions.EasySNMPTimeoutError:
            temp += 1
            timeout += 1
            continue
        resptime = time()
        if len(previous) == len(current):
            timediff = request_time-previous_time
            if int(current[0].value)-int(previous[0].value)<0:
                print('Agent Rebooting')
                reboots += 1
            elif sample_freq<=1 and timediff!=0:
                timediff = int(timediff)
            elif sample_freq<=1 and timediff==0:
                timediff = int(interval)
            x = 1
            while x<len(oid):
                if current[x].snmp_type!="NOSUCHINSTANCE" and previous[x].snmp_type!="NOSUCHINSTANCE":
                    current_value = int(current[x].value)
                    previous_value = int(previous[x].value)
                    if current_value >= previous_value:
                        # 
                        rate = (current_value-previous_value)/timediff
                        rates.append(rate)
                    
                    elif current[x].snmp_type == "COUNTER64" and previous[x].snmp_type=="COUNTER64":
                            rate = ((2**64+current_value)-previous_value)/timediff
                            rates.append(rate)
                    elif current[x].snmp_type == "COUNTER" and previous[x].snmp_type == "COUNTER":
                            rate = ((2**32+current_value)-previous_value)/timediff
                            rates.append(rate)
                else:
                    rates.append(current[x].value)
                x+=1
            print int(request_time),'|', ''.join(map(str,rates))
            temp+=1        
        rates = [] #clean rates
        previous = current[:]
        previous_time = request_time
        if interval>time()-request_time:
            sleep(interval-time()+request_time)
        else:
            pass
    if timeout>0:
        print('Total number of timeouts:',timeout)
    if reboots>0:
        print('Total number of reboots:',reboots)
            

if __name__ == "__main__":
   main(sys.argv[1:])
